# -*- coding: utf-8 -*-
"""ED_kNN_przykład.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jlvsSBYu7Z4J2PTDwBJtFJZAHR0Gcy0u
"""

import pandas as pd
import numpy as np
import random

"""Generujemy zbiór danych:"""

X_A,X_B,Y_A,Y_B = [],[],[],[] 
for j in range(30): 
  X_A.append(random.random()*4.9) 
  X_B.append(random.random()*5.1+5)
  Y_A.append(random.random()*5.1) 
  Y_B.append(random.random()*4.9+5)

"""Punkty podzielone są na dwie klasy. Interesuje nas przynależność punktu (5,5) - punkt zielony."""

import matplotlib.pyplot as plt
plt.scatter(X_A,Y_A)
plt.scatter(X_B,Y_B)
plt.scatter(5,5)
plt.show()

"""Łączymy współrzędne w krotki i zapisujemy je w tablicy. Etykiety umieszczamy w tablicy."""

X_A = np.array(X_A)
X_B = np.array(X_B)
Y_A = np.array(Y_A)
Y_B = np.array(Y_B)
X = np.concatenate([X_A,X_B])
Y = np.concatenate([Y_A,Y_B])

data = list(zip(X,Y))

L_0 = np.full((30,),0)
L_1 = np.full((30,),1)
L = np.concatenate([L_0,L_1])
dataC =list(zip(X,Y,L))
data,L

"""Klasyfikacja dla k=3:"""

from sklearn.neighbors import KNeighborsClassifier

neigh = KNeighborsClassifier(n_neighbors=3)
neigh.fit(data, L)

point = np.array([[2,2]])

print(neigh.predict(point))

"""K nieparzyste"""

import math

#NewData = list(zip(data,L))#np.dstack((dataC,L))

print(dataC)

point_x = 2
point_y = 2
num_neighbors=3
distances = list()
neighbors = list()
for point in dataC:
  print(point[0],point[1])
  i = -1
  j= -1
  #
  #for cent in Centers:
  #  print("Cent",cent[0],cent[1])
  #  i= i+1
  euclidesian=math.sqrt(((point_y-point[1])*(point_y-point[1]))+((point_x-point[0])*(point_x-point[0])))
  #if(i==0):
     # min=euclidesian
     # j=i
  #if(min>euclidesian):
     # min=euclidesian
    #  j=i

  print(euclidesian)
  print("    ")
  #print("Max"," i ", min,i,j)
  #point[2]=j

  #distances = list()
 # for train_row in train:
   #dist = euclidean_distance(test_row, train_row)
  distances.append((point, euclidesian))
  distances.sort(key=lambda tup: tup[1])

   #neighbors = list()
for test in distances:
  print(test,"test")
for i in range(num_neighbors):
   neighbors.append(distances[i][0])
  
print(distances)
print("******")
print(neighbors)

classesArr = np.array([])
for classes in range(num_neighbors):#neighbors:
  print(neighbors[classes][2])
  classesArr = np.append(classesArr,neighbors[classes][2])

classesArr = np.append(classesArr,2)

classesArr = classesArr.astype(int)
counts = np.bincount(classesArr)
print(np.argmax(counts))
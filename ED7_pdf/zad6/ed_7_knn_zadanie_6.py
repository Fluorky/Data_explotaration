# -*- coding: utf-8 -*-
"""ED_7_kNN_zadanie_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zJqPvCMlVIeV9tLIlaqPVXEkTO4Nc05h
"""

import pandas as pd
import numpy as np
import random
from sklearn import preprocessing
le = preprocessing.LabelEncoder()

from sklearn.neighbors import KNeighborsClassifier

dataFile = pd.read_csv('tic-tac-toe.data')

dataFile.head()

dataFile=dataFile.dropna()

dataFile.info()

top_left_square=list(dataFile["top-left-square"])
top_middle_square=list(dataFile["top-middle-square"])
top_right_square=list(dataFile["top-right-square"])
middle_left_square=list(dataFile["middle-left-square"])
middle_middle_square=list(dataFile["middle-middle-square"])
middle_right_square=list(dataFile["middle-right-square"])
bottom_left_square=list(dataFile["bottom-left-square"])
bottom_middle_square=list(dataFile["bottom-middle-square"])
bottom_right_square=list(dataFile["bottom-right-square"])
Class=list(dataFile["Class"])

top_left_square_encoded=le.fit_transform(top_left_square)
top_middle_square_encoded=le.fit_transform(top_middle_square)
top_right_square_encoded=le.fit_transform(top_right_square)
middle_left_square_encoded=le.fit_transform(middle_left_square)
middle_middle_square_encoded=le.fit_transform(middle_middle_square)
middle_right_square_encoded=le.fit_transform(middle_right_square)
bottom_left_square_encoded=le.fit_transform(bottom_left_square)
bottom_middle_square_encoded=le.fit_transform(bottom_middle_square)
bottom_right_square_encoded=le.fit_transform(bottom_right_square)
Class_encoded=le.fit_transform(Class)

data=list(zip(top_left_square_encoded,top_middle_square_encoded,top_right_square_encoded,middle_left_square_encoded,middle_middle_square_encoded,middle_right_square_encoded,bottom_left_square_encoded,bottom_middle_square_encoded,bottom_right_square_encoded))#,cabin_encoded))
print(data)

label=le.fit_transform(Class_encoded)
print(label)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(data, label, test_size=800)

for i in range (3,38):
  neigh = KNeighborsClassifier(n_neighbors=i,p=2)
  neigh.fit(x_train,y_train)
  neigh.score(x_test,y_test)
  print(i, " " ,neigh.score(x_test,y_test))
# -*- coding: utf-8 -*-
"""PCA_example_sklearn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10JHN2rYETdHe8mhBuKpNme_O0mCGHMAr

# **ANALIZA SKŁADOWYCH GŁÓWNYCH**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""Załadowanie zbioru danych:"""

data=pd.read_csv('PCA_dataset.csv')
data

plt.scatter(data.iloc[:,0], data.iloc[:,1])
plt.axis('equal');

"""## Dwie składowe główne

Wyliczamy dwie składowe główne (**n_components=2**) czyli wektory bazowe nowego układu współrzędnych:
"""

from sklearn.decomposition import PCA
pca = PCA(n_components=2)
pca.fit(data)

"""Wektory bazowe nowego układu wpółrzędnych: """

print(pca.components_)

"""Wariancje dla nowych współrzędnych:"""

print(pca.explained_variance_)

"""Dodajemy do wykresu wektory wyznaczające nowy układ współrzędnych. Ich długość określona jest przez wariancje: """

def draw_vector(v0, v1, ax=None):
  ax = ax or plt.gca()
  arrowprops=dict(arrowstyle='->',
  linewidth=2,
  shrinkA=0, shrinkB=0, color='black')
  ax.annotate('', v1, v0, arrowprops=arrowprops)

plt.scatter(data.iloc[:, 0], data.iloc[:, 1], alpha=0.2)
for length, vector in zip(pca.explained_variance_, pca.components_):
  v = vector * 3 * np.sqrt(length)
  draw_vector(pca.mean_, pca.mean_ + v)
plt.axis('equal');

"""Współrzędne punktów w **nowym układzie współrzędnych**:"""

data_pca = pca.transform(data)
data_pca

plt.scatter(data_pca[:,0], data_pca[:,1])
plt.axis('equal');

"""## Jedna składowa główna

Wyliczamy jedną składową główną (**n_components=1**) - chcemy wyeliminować jeden wymiar danych.
"""

pca = PCA(n_components=1)
pca.fit(data)

"""Współrzędne punktów w **nowym układzie współrzędnych**:"""

data_pca = pca.transform(data)

"""Porówanie kształtów danych początkowych i po redukcji jednego wymiaru:"""

print("Początkowy shape: ", data.shape)
print("Po transformacji shape:", data_pca.shape)

"""Dane początkowe i po redukcji wymiaru:"""

data_new = pca.inverse_transform(data_pca)
plt.scatter(data.iloc[:, 0], data.iloc[:, 1]),
plt.scatter(data_new[:, 0], data_new[:, 1]),
plt.axis('equal');
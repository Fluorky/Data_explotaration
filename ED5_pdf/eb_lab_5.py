# -*- coding: utf-8 -*-
"""EB_lab_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HnRDufnFxdXBiMfGj-oT0Ae-NcFS9f3K
"""

import pandas as pd
import numpy as np
data = pd.read_csv('PersonsData.csv')
print(data)

np.sqrt(np.sum((data.iloc[0,:]-data.iloc[1,:])**2))

data_copy=data.copy()

#data_copy.iloc[:,3]=data_copy.iloc[:,3]/1000

data_copy.iloc[:,3]=data_copy.iloc[:,3]*1000

print(data_copy)

np.sqrt(np.sum((data_copy.iloc[0,:]-data_copy.iloc[1,:])**2))

data_copy2=data_copy.copy()

data_copy.iloc[:,:]

data_copy.iloc[:,:].std()

data_copy3=data.copy()

data_copy3.iloc[:,:]=data.iloc[:,:]/data.iloc[:,:].std()

data_copy2.iloc[:,:]=data_copy2.iloc[:,:]/data_copy2.iloc[:,:].std()

print(data_copy2)

np.sqrt(np.sum((data_copy2.iloc[0,:]-data_copy2.iloc[1,:])**2))

np.sqrt(np.sum((data_copy3.iloc[0,:]-data_copy3.iloc[1,:])**2))

data.iloc[:,3].std()

"""minskowskiego"""

np.sqrt(np.sum((data.iloc[0,:]-data.iloc[1,:])**2))

"""miejska"""

np.sum(np.abs(data.iloc[0,:]-data.iloc[1,:]))

"""Zad 2

"""

data2 = pd.read_csv('BinaryData.csv')
print(data2)

a=len(data2.index)

AB_n10=np.sum(data2.iloc[0,:]-data2.iloc[1,:]==1)
AB_n11=np.sum((data2.iloc[0,:]-data2.iloc[1,:]==0)&(data2.iloc[0,:]==1)&(data2.iloc[1,:]==1))
AB_n00=np.sum((data2.iloc[0,:]-data2.iloc[1,:]==0)&(data2.iloc[0,:]==0)&(data2.iloc[1,:]==0))
AB_n01=np.sum(data2.iloc[1,:]-data2.iloc[0,:]==1)
print("AB_n00 "+ str(AB_n00)+" AB_n01 "+str(AB_n01)+" AB_n10 "+ str(AB_n10) +" AB_n11 "+str(AB_n11))

n10 = []

n10.append(np.sum(data2.iloc[0,:]-data2.iloc[1,:]==1))
n10.append(np.sum(data2.iloc[1,:]-data2.iloc[2,:]==1))

for i in range(a):
    for j in range(a):
        if(str(data2.iloc[i,:].name)!=str(data2.iloc[j,:].name)):
            n10=np.sum(data2.iloc[i,:]-data2.iloc[j,:]==1)
            n11=np.sum((data2.iloc[i,:]-data2.iloc[j,:]==0)&(data2.iloc[i,:]==1)&(data2.iloc[j,:]==1))
            n00=np.sum((data2.iloc[i,:]-data2.iloc[j,:]==0)&(data2.iloc[i,:]==0)&(data2.iloc[j,:]==0))
            n01=np.sum(data2.iloc[j,:]-data2.iloc[i,:]==1)
            jacard=n11/(n11++n10+n01)
            dice=2*n11/(2*n11+n10+n01)
            print(str(data2.iloc[i,:].name)+" "+str(data2.iloc[j,:].name))
            print("Jacard: "+str(jacard))
            print("Dice: "+str(dice))
            print(str(data2.iloc[i,:].name)+" "+str(data2.iloc[j,:].name)+" n00 "+ str(n00)+" n01 "+str(n01)+" n10 "+ str(n10) +" n11 "+str(n11))

"""Zad 3

1.Jest małe zróżnicowanie wartości cechy w dwóch środkowych ćwiartkach rozkładu

2.Jest duże zróżnicowanie wartości cechy w dwóch środkowych ćwiartkach rozkładu

3.Pudełko nr 3 ma większe zróżnicowanie wartości cechy w dwóch środkowych ćwiartkach rozkładu niż pudełko nr 4

4.Mediana ma tą samą wartość

5.Mediana w przypadku kategorii reprezentowanej przez wykres pudełkowy nr 2 jest większa niż w wypadku nr 4

6.Wartość maksimum w wypadku kategorii nr 1 jest większa niż w wypadku kategorii nr 2, zaś w przypadku minimum wartość ta w wypadku kategorii nr 1 jest mniejsza niż w wypadku kategorii nr 2.

Zad 4
"""

XD=np.array([30, 75, 79, 80, 85, 105, 126, 130, 138, 140, 149, 149, 152, 156, 161, 166, 173, 179, 182, 184, 198, 223,
240, 242, 245, 247, 254, 274, 291, 384, 470])

import matplotlib.pyplot as plt

#plt.hist(XD, bins='auto')
plt.hist(XD, bins = [0,40,80,120,160,200,240,280,320,360,400,440,480,520])

df = pd.DataFrame(XD, columns = ['Column_A'])

df.mean()

df.median()

dominant=df['Column_A'].value_counts()
print(dominant)

max(dominant)

from scipy.stats import skew

skew(df)

np.quantile(XD,0.0)

Q1=np.quantile(XD,0.25)

Q2=np.quantile(XD,0.5)

Q3=np.quantile(XD,0.75)

Q4=np.quantile(XD,1)

df.describe()

IQR=Q3-Q1

print(IQR)

fig = plt.figure(figsize =(15, 7))
 
# Creating plot
plt.boxplot(XD)
 
# show plot
plt.show()

"""Zad 5"""

dataEx5 = pd.read_csv('SkokiNarciarskie.csv', delimiter=",")
print(dataEx5)

dataEx5.info()

dataEx5.head()

dataEx5.describe()

for zjebane_gowno_Twojej_Strej in dataEx5:
  print(zjebane_gowno_Twojej_Strej)

test=[]
for index, row in dataEx5.iterrows():
  print((row[0]+row[1])/2)
  for i in range(row[2]):
    print("test",i)
    test.append((row[0]+row[1])/2)

test

plt.hist(test, bins = [105,110,115,120,125,130,135,140])

df = pd.DataFrame(test, columns = ['Column_A'])

df.mean()

df.median()

dominant=df['Column_A'].value_counts()
print(dominant)

max(dominant)

skew(df)

np.quantile(test,0.0)

Q1=np.quantile(test,0.25)

Q2=np.quantile(test,0.5)

Q3=np.quantile(test,0.75)

Q4=np.quantile(test,1)

df.describe()

IQR=Q3-Q1

print(IQR)

fig = plt.figure(figsize =(15, 7))
plt.boxplot(test)
plt.show()
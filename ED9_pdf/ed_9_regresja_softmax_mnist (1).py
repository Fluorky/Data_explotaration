# -*- coding: utf-8 -*-
"""ED_9_regresja_softmax_MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LCZ2CV30ZuTyEcZA-GjkAUIMJwtVM1gJ

Import biblioteki **TensorFlow** ([https://www.tensorflow.org/](https://www.tensorflow.org/)) z której będziemy korzystali w **uczeniu maszynowym**:
"""

import tensorflow as tf
import matplotlib.pyplot as plt 
import numpy as np

import keras
from keras.models import Sequential
from keras.layers import Dense

"""##Rozpoznawanie cyfr - zbiór **MNIST**

Pobranie danych
"""

(train_data, train_labels), (test_data, test_labels) = tf.keras.datasets.mnist.load_data()

"""Wybrane informacje o zbiorze"""

train_data.shape,train_labels.shape

test_data.shape,test_labels.shape

train_data[0]

train_labels[0]

"""Kodowanie one-hot"""

train_labels = tf.keras.utils.to_categorical(train_labels, 10)
test_labels = tf.keras.utils.to_categorical(test_labels, 10)

train_data.shape,train_labels.shape

test_data.shape,test_labels.shape

train_labels[0]

"""Wizualizacja"""

def plot_image(img_index):
    label_index = train_labels[img_index]
    plt.imshow(train_data[img_index]/255, cmap = 'gray')
    print(label_index)
    
img_index = 10
plot_image(img_index)

train_images = train_data.reshape((-1, 784))
test_images = test_data.reshape((-1, 784))

model = Sequential()
model.add(Dense(units = 128, use_bias=True, input_shape=(784,), activation = "relu"))
model.add(Dense(units = 128, use_bias=True, activation = "relu"))
model.add(Dense(units = 64, use_bias=True, activation = "relu"))
model.add(Dense(units = 10, use_bias=True, activation = "softmax"))

opt = tf.keras.optimizers.Adam(learning_rate=0.002)
#opt = tf.keras.optimizers.SGD(learning_rate=0.001)

model.compile(loss='categorical_crossentropy',optimizer=opt,metrics=['accuracy'])
model.summary()

batch_size = 128
epochs = 10

h = model.fit(train_images, train_labels, batch_size=batch_size, epochs=epochs, validation_split=0.2)

plt.scatter(np.arange(epochs),h.history['loss'])
plt.scatter(np.arange(epochs),h.history['val_loss'],c='r')
plt.show()

score = model.evaluate(test_images, test_labels, verbose=0)
print("Test loss:", score[0])
print("Test accuracy:", score[1])

def plot_image(img_index):
    label_index = train_labels[img_index]
    plt.imshow(train_data[img_index]/255, cmap = 'gray')
    print(label_index)
    
img_index = 10
plot_image(img_index)

picture = train_data[img_index].reshape(-1,784)

model.predict(picture)

